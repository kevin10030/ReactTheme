{"ast":null,"code":"import _defineProperty from \"D:\\\\CSH\\\\Samples\\\\Theme\\\\coreui-pro-react-admin-template-v3.0.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"D:\\\\CSH\\\\Samples\\\\Theme\\\\coreui-pro-react-admin-template-v3.0.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\CSH\\\\Samples\\\\Theme\\\\coreui-pro-react-admin-template-v3.0.0\\\\src\\\\views\\\\forms\\\\validation-forms\\\\ValidationForms.js\";\n\nimport React from 'react';\nimport { CButton, CCard, CCardHeader, CCardBody, CCol, CForm, CInvalidFeedback, CInputCheckbox, CFormGroup, CLabel, CInput, CRow } from '@coreui/react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nvar validationSchema = function validationSchema(values) {\n  return Yup.object().shape({\n    firstName: Yup.string().min(2, \"First name has to be at least 2 characters\").required('First name is required'),\n    lastName: Yup.string().min(1, \"Last name has to be at least 1 character\").required('Last name is required'),\n    userName: Yup.string().min(5, \"Username has to be at least 5 characters\").required('Username is required'),\n    email: Yup.string().email('Invalid email address').required('Email is required!'),\n    password: Yup.string().min(6, \"Password has to be at least \".concat(6, \" characters!\")).matches(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}/, 'Password must contain: numbers, uppercase and lowercase letters\\n').required('Password is required'),\n    confirmPassword: Yup.string().oneOf([values.password], 'Passwords must match').required('Password confirmation is required'),\n    accept: Yup.bool().required('* required').test('accept', 'You have to accept our Terms and Conditions!', function (value) {\n      return value === true;\n    })\n  });\n};\n\nvar validate = function validate(getValidationSchema) {\n  return function (values) {\n    var validationSchema = getValidationSchema(values);\n\n    try {\n      validationSchema.validateSync(values, {\n        abortEarly: false\n      });\n      return {};\n    } catch (error) {\n      return getErrorsFromValidationError(error);\n    }\n  };\n};\n\nvar getErrorsFromValidationError = function getErrorsFromValidationError(validationError) {\n  var FIRST_ERROR = 0;\n  return validationError.inner.reduce(function (errors, error) {\n    return _objectSpread(_objectSpread({}, errors), {}, _defineProperty({}, error.path, error.errors[FIRST_ERROR]));\n  }, {});\n};\n\nvar initialValues = {\n  firstName: \"\",\n  lastName: \"\",\n  userName: \"\",\n  email: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n  accept: false\n};\n\nvar onSubmit = function onSubmit(values, _ref) {\n  var setSubmitting = _ref.setSubmitting,\n      setErrors = _ref.setErrors;\n  setTimeout(function () {\n    alert(JSON.stringify(values, null, 2)); // console.log('User has been successfully saved!', values)\n\n    setSubmitting(false);\n  }, 2000);\n};\n\nvar findFirstError = function findFirstError(formName, hasError) {\n  var form = document.forms[formName];\n\n  for (var i = 0; i < form.length; i++) {\n    if (hasError(form[i].name)) {\n      form[i].focus();\n      break;\n    }\n  }\n};\n\nvar validateForm = function validateForm(errors) {\n  findFirstError('simpleForm', function (fieldName) {\n    return Boolean(errors[fieldName]);\n  });\n};\n\nvar touchAll = function touchAll(setTouched, errors) {\n  setTouched({\n    firstName: true,\n    lastName: true,\n    userName: true,\n    email: true,\n    password: true,\n    confirmPassword: true,\n    accept: true\n  });\n  validateForm(errors);\n};\n\nvar ValidationForms = function ValidationForms() {\n  return /*#__PURE__*/React.createElement(CCard, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CCardHeader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, \"Form Validation\", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://coreui.io/pro/react/\",\n    className: \"badge badge-danger ml-1\",\n    target: \"_blank\",\n    rel: \"noreferrer noopener\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, \"CoreUI Pro Component\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-header-actions\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: \"card-header-action\",\n    href: \"https://github.com/jaredpalmer/formik\",\n    target: \"_blank\",\n    rel: \"noreferrer noopener\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"small\", {\n    className: \"text-muted\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, \"docs\")))), /*#__PURE__*/React.createElement(CCardBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://github.com/jaredpalmer/formik\",\n    target: \"_blank\",\n    rel: \"noreferrer noopener\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, \"Formik\"), \" \", /*#__PURE__*/React.createElement(\"cite\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 110\n    }\n  }, \"Build forms in React, without the tears\"), \" with \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://github.com/jquense/yup\",\n    target: \"_blank\",\n    rel: \"noreferrer noopener\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 168\n    }\n  }, \"Yup\"), \" \", /*#__PURE__*/React.createElement(\"cite\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 259\n    }\n  }, \"Dead simple Object schema validation\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: initialValues,\n    validate: validate(validationSchema),\n    onSubmit: onSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, function (_ref2) {\n    var values = _ref2.values,\n        errors = _ref2.errors,\n        touched = _ref2.touched,\n        status = _ref2.status,\n        dirty = _ref2.dirty,\n        handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        handleSubmit = _ref2.handleSubmit,\n        isSubmitting = _ref2.isSubmitting,\n        isValid = _ref2.isValid,\n        handleReset = _ref2.handleReset,\n        setTouched = _ref2.setTouched;\n    return /*#__PURE__*/React.createElement(CRow, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(CCol, {\n      lg: \"6\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CForm, {\n      onSubmit: handleSubmit,\n      noValidate: true,\n      name: \"simpleForm\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(CFormGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CLabel, {\n      htmlFor: \"firstName\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 23\n      }\n    }, \"First Name\"), /*#__PURE__*/React.createElement(CInput, {\n      type: \"text\",\n      name: \"firstName\",\n      id: \"firstName\",\n      placeholder: \"First Name\",\n      autoComplete: \"given-name\",\n      valid: !errors.firstName,\n      invalid: touched.firstName && !!errors.firstName,\n      autoFocus: true,\n      required: true,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.firstName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(CInvalidFeedback, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 23\n      }\n    }, errors.firstName)), /*#__PURE__*/React.createElement(CFormGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CLabel, {\n      htmlFor: \"lastName\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 23\n      }\n    }, \"Last Name\"), /*#__PURE__*/React.createElement(CInput, {\n      type: \"text\",\n      name: \"lastName\",\n      id: \"lastName\",\n      placeholder: \"Last Name\",\n      autoComplete: \"family-name\",\n      valid: !errors.lastName,\n      invalid: touched.lastName && !!errors.lastName,\n      required: true,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.lastName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(CInvalidFeedback, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 23\n      }\n    }, errors.lastName)), /*#__PURE__*/React.createElement(CFormGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CLabel, {\n      htmlFor: \"userName\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 23\n      }\n    }, \"User Name\"), /*#__PURE__*/React.createElement(CInput, {\n      type: \"text\",\n      name: \"userName\",\n      id: \"userName\",\n      placeholder: \"User Name\",\n      autoComplete: \"username\",\n      valid: !errors.userName,\n      invalid: touched.userName && !!errors.userName,\n      required: true,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.userName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(CInvalidFeedback, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 23\n      }\n    }, errors.userName)), /*#__PURE__*/React.createElement(CFormGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CLabel, {\n      htmlFor: \"email\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 23\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(CInput, {\n      type: \"email\",\n      name: \"email\",\n      id: \"email\",\n      placeholder: \"Email\",\n      autoComplete: \"email\",\n      valid: !errors.email,\n      invalid: touched.email && !!errors.email,\n      required: true,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.email,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(CInvalidFeedback, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 23\n      }\n    }, errors.email)), /*#__PURE__*/React.createElement(CRow, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CCol, {\n      md: 6,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(CFormGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CLabel, {\n      htmlFor: \"password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 27\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(CInput, {\n      type: \"password\",\n      name: \"password\",\n      id: \"password\",\n      placeholder: \"Password\",\n      autoComplete: \"new-password\",\n      valid: !errors.password,\n      invalid: touched.password && !!errors.password,\n      required: true,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.password,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 27\n      }\n    }), /*#__PURE__*/React.createElement(CInvalidFeedback, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 27\n      }\n    }, errors.password))), /*#__PURE__*/React.createElement(CCol, {\n      md: 6,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(CFormGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CLabel, {\n      htmlFor: \"confirmPassword\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 27\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(CInput, {\n      type: \"password\",\n      name: \"confirmPassword\",\n      id: \"confirmPassword\",\n      placeholder: \"Confirm password\",\n      autoComplete: \"new-password\",\n      valid: !errors.confirmPassword,\n      invalid: touched.confirmPassword && !!errors.confirmPassword,\n      required: true,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.confirmPassword,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 27\n      }\n    }), /*#__PURE__*/React.createElement(CInvalidFeedback, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 27\n      }\n    }, errors.confirmPassword)))), /*#__PURE__*/React.createElement(CFormGroup, {\n      variant: \"custom-checkbox\",\n      className: \"pb-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CInputCheckbox, {\n      custom: true,\n      id: \"accept\",\n      required: true,\n      valid: !errors.accept,\n      invalid: touched.accept && !!errors.accept,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(CLabel, {\n      variant: \"custom-checkbox\",\n      htmlFor: \"accept\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 23\n      }\n    }, \"I accept the terms of use\"), /*#__PURE__*/React.createElement(CInvalidFeedback, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 23\n      }\n    }, errors.accept)), /*#__PURE__*/React.createElement(CFormGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CButton, {\n      type: \"submit\",\n      color: \"primary\",\n      className: \"mr-1\",\n      disabled: isSubmitting || !isValid,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 23\n      }\n    }, isSubmitting ? 'Wait...' : 'Submit'), /*#__PURE__*/React.createElement(CButton, {\n      type: \"button\",\n      color: \"success\",\n      className: \"mr-1\",\n      onClick: function onClick() {\n        return touchAll(setTouched, errors);\n      },\n      disabled: isValid,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 23\n      }\n    }, \"Validate\"), /*#__PURE__*/React.createElement(CButton, {\n      type: \"reset\",\n      color: \"danger\",\n      className: \"mr-1\",\n      onClick: handleReset,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 23\n      }\n    }, \"Reset\")))), /*#__PURE__*/React.createElement(CCol, {\n      lg: \"6\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CCard, {\n      color: isValid ? 'gradient-info' : 'gradient-secondary',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(CCardBody, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"pre\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 23\n      }\n    }, \"values: \", JSON.stringify(values, null, 2)), /*#__PURE__*/React.createElement(\"pre\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 23\n      }\n    }, \"errors: \", JSON.stringify(errors, null, 2)), /*#__PURE__*/React.createElement(\"pre\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 23\n      }\n    }, \"touched: \", JSON.stringify(touched, null, 2))))));\n  })));\n};\n\nexport default ValidationForms;","map":{"version":3,"sources":["D:/CSH/Samples/Theme/coreui-pro-react-admin-template-v3.0.0/src/views/forms/validation-forms/ValidationForms.js"],"names":["React","CButton","CCard","CCardHeader","CCardBody","CCol","CForm","CInvalidFeedback","CInputCheckbox","CFormGroup","CLabel","CInput","CRow","Formik","Yup","validationSchema","values","object","shape","firstName","string","min","required","lastName","userName","email","password","matches","confirmPassword","oneOf","accept","bool","test","value","validate","getValidationSchema","validateSync","abortEarly","error","getErrorsFromValidationError","validationError","FIRST_ERROR","inner","reduce","errors","path","initialValues","onSubmit","setSubmitting","setErrors","setTimeout","alert","JSON","stringify","findFirstError","formName","hasError","form","document","forms","i","length","name","focus","validateForm","fieldName","Boolean","touchAll","setTouched","ValidationForms","touched","status","dirty","handleChange","handleBlur","handleSubmit","isSubmitting","isValid","handleReset"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CCol,\n  CForm,\n  CInvalidFeedback,\n  CInputCheckbox,\n  CFormGroup,\n  CLabel,\n  CInput,\n  CRow\n} from '@coreui/react'\nimport { Formik } from 'formik'\nimport * as Yup from 'yup'\n\nconst validationSchema = function (values) {\n  return Yup.object().shape({\n    firstName: Yup.string()\n    .min(2, `First name has to be at least 2 characters`)\n    .required('First name is required'),\n    lastName: Yup.string()\n    .min(1, `Last name has to be at least 1 character`)\n    .required('Last name is required'),\n    userName: Yup.string()\n    .min(5, `Username has to be at least 5 characters`)\n    .required('Username is required'),\n    email: Yup.string()\n    .email('Invalid email address')\n    .required('Email is required!'),\n    password: Yup.string()\n    .min(6, `Password has to be at least ${6} characters!`)\n    .matches(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}/, 'Password must contain: numbers, uppercase and lowercase letters\\n')\n    .required('Password is required'),\n    confirmPassword: Yup.string()\n    .oneOf([values.password], 'Passwords must match')\n    .required('Password confirmation is required'),\n    accept: Yup.bool()\n    .required('* required')\n    .test('accept', 'You have to accept our Terms and Conditions!', value => value === true),\n  })\n}\n\nconst validate = (getValidationSchema) => {\n  return (values) => {\n    const validationSchema = getValidationSchema(values)\n    try {\n      validationSchema.validateSync(values, { abortEarly: false })\n      return {}\n    } catch (error) {\n      return getErrorsFromValidationError(error)\n    }\n  }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n  const FIRST_ERROR = 0\n  return validationError.inner.reduce((errors, error) => {\n    return {\n      ...errors,\n      [error.path]: error.errors[FIRST_ERROR],\n    }\n  }, {})\n}\n\nconst initialValues = {\n  firstName: \"\",\n  lastName: \"\",\n  userName: \"\",\n  email: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n  accept: false\n}\n\nconst onSubmit = (values, { setSubmitting, setErrors }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2))\n    // console.log('User has been successfully saved!', values)\n    setSubmitting(false)\n  }, 2000)\n}\n\nconst findFirstError = (formName, hasError) => {\n  const form = document.forms[formName]\n  for (let i = 0; i < form.length; i++) {\n    if (hasError(form[i].name)) {\n      form[i].focus()\n      break\n    }\n  }\n}\n\nconst validateForm = (errors) => {\n  findFirstError('simpleForm', (fieldName) => {\n    return Boolean(errors[fieldName])\n  })\n}\n\nconst touchAll = (setTouched, errors) => {\n  setTouched({\n    firstName: true,\n    lastName: true,\n    userName: true,\n    email: true,\n    password: true,\n    confirmPassword: true,\n    accept: true\n  })\n  validateForm(errors)\n}\n\nconst ValidationForms = () =>  {\n  return (\n    <CCard>\n      <CCardHeader>\n        Form Validation\n        <a href=\"https://coreui.io/pro/react/\" className=\"badge badge-danger ml-1\" target=\"_blank\" rel=\"noreferrer noopener\">CoreUI Pro Component</a>\n        <div className=\"card-header-actions\">\n          <a className=\"card-header-action\" href=\"https://github.com/jaredpalmer/formik\" target=\"_blank\" rel=\"noreferrer noopener\">\n            <small className=\"text-muted\">docs</small>\n          </a>\n        </div>\n      </CCardHeader>\n      <CCardBody>\n        <a href=\"https://github.com/jaredpalmer/formik\" target=\"_blank\" rel=\"noreferrer noopener\">Formik</a> <cite>Build forms in React, without the tears</cite> with <a href=\"https://github.com/jquense/yup\" target=\"_blank\" rel=\"noreferrer noopener\">Yup</a> <cite>Dead simple Object schema\n        validation</cite>\n        <hr />\n        <Formik\n          initialValues={initialValues}\n          validate={validate(validationSchema)}\n          onSubmit={onSubmit}\n        >\n          {\n            ({\n              values,\n              errors,\n              touched,\n              status,\n              dirty,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              isSubmitting,\n              isValid,\n              handleReset,\n              setTouched\n            }) => (\n              <CRow>\n                <CCol lg=\"6\">\n                  <CForm onSubmit={handleSubmit} noValidate name='simpleForm'>\n                    <CFormGroup>\n                      <CLabel htmlFor=\"firstName\">First Name</CLabel>\n                      <CInput type=\"text\"\n                              name=\"firstName\"\n                              id=\"firstName\"\n                              placeholder=\"First Name\"\n                              autoComplete=\"given-name\"\n                              valid={!errors.firstName}\n                              invalid={touched.firstName && !!errors.firstName}\n                              autoFocus={true}\n                              required\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              value={values.firstName} />\n                      <CInvalidFeedback>{errors.firstName}</CInvalidFeedback>\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor=\"lastName\">Last Name</CLabel>\n                      <CInput type=\"text\"\n                              name=\"lastName\"\n                              id=\"lastName\"\n                              placeholder=\"Last Name\"\n                              autoComplete=\"family-name\"\n                              valid={!errors.lastName}\n                              invalid={touched.lastName && !!errors.lastName}\n                              required\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              value={values.lastName} />\n                      <CInvalidFeedback>{errors.lastName}</CInvalidFeedback>\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor=\"userName\">User Name</CLabel>\n                      <CInput type=\"text\"\n                              name=\"userName\"\n                              id=\"userName\"\n                              placeholder=\"User Name\"\n                              autoComplete=\"username\"\n                              valid={!errors.userName}\n                              invalid={touched.userName && !!errors.userName}\n                              required\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              value={values.userName} />\n                      <CInvalidFeedback>{errors.userName}</CInvalidFeedback>\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor=\"email\">Email</CLabel>\n                      <CInput type=\"email\"\n                              name=\"email\"\n                              id=\"email\"\n                              placeholder=\"Email\"\n                              autoComplete=\"email\"\n                              valid={!errors.email}\n                              invalid={touched.email && !!errors.email}\n                              required\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              value={values.email} />\n                      <CInvalidFeedback>{errors.email}</CInvalidFeedback>\n                    </CFormGroup>\n                    <CRow>\n                      <CCol md={6}>\n                        <CFormGroup>\n                          <CLabel htmlFor=\"password\">Password</CLabel>\n                          <CInput type=\"password\"\n                                  name=\"password\"\n                                  id=\"password\"\n                                  placeholder=\"Password\"\n                                  autoComplete=\"new-password\"\n                                  valid={!errors.password}\n                                  invalid={touched.password && !!errors.password}\n                                  required\n                                  onChange={handleChange}\n                                  onBlur={handleBlur}\n                                  value={values.password} />\n                          {/*<CInvalidFeedback>Required password containing at least: number, uppercase and lowercase letter, 8 characters</CInvalidFeedback>*/}\n                          <CInvalidFeedback>{errors.password}</CInvalidFeedback>\n                        </CFormGroup>\n                      </CCol>\n                      <CCol md={6}>\n                        <CFormGroup>\n                          <CLabel htmlFor=\"confirmPassword\">Password</CLabel>\n                          <CInput type=\"password\"\n                                  name=\"confirmPassword\"\n                                  id=\"confirmPassword\"\n                                  placeholder=\"Confirm password\"\n                                  autoComplete=\"new-password\"\n                                  valid={!errors.confirmPassword}\n                                  invalid={touched.confirmPassword && !!errors.confirmPassword}\n                                  required\n                                  onChange={handleChange}\n                                  onBlur={handleBlur}\n                                  value={values.confirmPassword} />\n                          <CInvalidFeedback>{errors.confirmPassword}</CInvalidFeedback>\n                        </CFormGroup>\n                      </CCol>\n                    </CRow>\n                    <CFormGroup variant=\"custom-checkbox\" className=\"pb-3\">\n                      <CInputCheckbox\n                        custom\n                        id=\"accept\"\n                        required\n                        valid={!errors.accept}\n                        invalid={touched.accept && !!errors.accept}\n                        onChange={handleChange}\n                        onBlur={handleBlur} \n                      />\n                      <CLabel variant=\"custom-checkbox\" htmlFor=\"accept\">\n                        I accept the terms of use\n                      </CLabel>\n                      <CInvalidFeedback>{errors.accept}</CInvalidFeedback>\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CButton type=\"submit\" color=\"primary\" className=\"mr-1\" disabled={isSubmitting || !isValid}>{isSubmitting ? 'Wait...' : 'Submit'}</CButton>\n                      <CButton type=\"button\" color=\"success\" className=\"mr-1\" onClick={() => touchAll(setTouched, errors)}  disabled={isValid}>Validate</CButton>\n                      <CButton type=\"reset\" color=\"danger\" className=\"mr-1\" onClick={handleReset}>Reset</CButton>\n                    </CFormGroup>\n                  </CForm>\n                </CCol>\n                <CCol lg=\"6\">\n                  <CCard color={isValid ? 'gradient-info' : 'gradient-secondary'}>\n                    <CCardBody>\n                      <pre>values: {JSON.stringify(values, null, 2)}</pre>\n                      <pre>errors: {JSON.stringify(errors, null, 2)}</pre>\n                      <pre>touched: {JSON.stringify(touched, null, 2)}</pre>\n                    </CCardBody>\n                  </CCard>\n                </CCol>\n              </CRow>\n            )}\n        </Formik>\n      </CCardBody>\n    </CCard>\n  )\n}\n\nexport default ValidationForms\n"]},"metadata":{},"sourceType":"module"}