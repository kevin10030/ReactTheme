{"ast":null,"code":"var _jsxFileName = \"D:\\\\CSH\\\\A\\\\IoT\\\\Web\\\\trainingapp\\\\web\\\\trainingapp\\\\src\\\\components\\\\Devices.jsx\";\nimport React from 'react';\nimport MaterialTable from 'material-table';\nexport default function Devices() {\n  const {\n    useState\n  } = React;\n  const [columns, setColumns] = useState([{\n    title: 'No',\n    field: 'no',\n    editable: 'onUpdate'\n  }, {\n    title: 'IMEI',\n    field: 'imei',\n    editable: 'onUpdate'\n  }, {\n    title: 'Customer',\n    field: 'customer',\n    lookup: {\n      34: 'Jane',\n      63: 'John'\n    }\n  }, {\n    title: 'Sim Card',\n    field: 'simCard',\n    editable: 'onUpdate'\n  }, {\n    title: 'Device Name',\n    field: 'deviceName',\n    editable: 'onUpdate'\n  }]);\n  const [data, setData] = useState([{\n    name: 'Mehmet',\n    surname: 'Baran',\n    birthYear: 1987,\n    birthCity: 63\n  }, {\n    name: 'Zerya Betül',\n    surname: 'Baran',\n    birthYear: 2017,\n    birthCity: 34\n  }]);\n  return /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"Device List\",\n    columns: columns,\n    data: data,\n    editable: {\n      onRowAdd: newData => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          setData([...data, newData]);\n          resolve();\n        }, 1000);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          const dataUpdate = [...data];\n          const index = oldData.tableData.id;\n          dataUpdate[index] = newData;\n          setData([...dataUpdate]);\n          resolve();\n        }, 1000);\n      }),\n      onRowDelete: oldData => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          const dataDelete = [...data];\n          const index = oldData.tableData.id;\n          dataDelete.splice(index, 1);\n          setData([...dataDelete]);\n          resolve();\n        }, 1000);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["D:/CSH/A/IoT/Web/trainingapp/web/trainingapp/src/components/Devices.jsx"],"names":["React","MaterialTable","Devices","useState","columns","setColumns","title","field","editable","lookup","data","setData","name","surname","birthYear","birthCity","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","dataUpdate","index","tableData","id","onRowDelete","dataDelete","splice"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport MaterialTable from 'material-table'\r\n\r\nexport default function Devices() {\r\n  const { useState } = React;\r\n\r\n  const [columns, setColumns] = useState([\r\n    { title: 'No', field: 'no', editable: 'onUpdate' },\r\n    { title: 'IMEI', field: 'imei', editable: 'onUpdate' },\r\n    {\r\n      title: 'Customer',\r\n      field: 'customer',\r\n      lookup: { 34: 'Jane', 63: 'John' },\r\n    },\r\n    { title: 'Sim Card', field: 'simCard', editable: 'onUpdate' },\r\n    { title: 'Device Name', field: 'deviceName', editable: 'onUpdate' },\r\n  ]);\r\n  \r\n  const [data, setData] = useState([\r\n    { name: 'Mehmet', surname: 'Baran', birthYear: 1987, birthCity: 63 },\r\n    { name: 'Zerya Betül', surname: 'Baran', birthYear: 2017, birthCity: 34 },\r\n  ]);\r\n\r\n  return (\r\n    <MaterialTable\r\n      title=\"Device List\"\r\n      columns={columns}\r\n      data={data}\r\n      editable={{\r\n        onRowAdd: newData =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              setData([...data, newData]);\r\n\r\n              resolve();\r\n            }, 1000)\r\n          }),\r\n        onRowUpdate: (newData, oldData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              const dataUpdate = [...data];\r\n              const index = oldData.tableData.id;\r\n              dataUpdate[index] = newData;\r\n              setData([...dataUpdate]);\r\n\r\n              resolve();\r\n            }, 1000)\r\n          }),\r\n        onRowDelete: oldData =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              const dataDelete = [...data];\r\n              const index = oldData.tableData.id;\r\n              dataDelete.splice(index, 1);\r\n              setData([...dataDelete]);\r\n\r\n              resolve();\r\n            }, 1000)\r\n          }),\r\n      }}\r\n    />\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}