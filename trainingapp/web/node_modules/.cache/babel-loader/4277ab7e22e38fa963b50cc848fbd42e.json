{"ast":null,"code":"var _jsxFileName = \"D:\\\\CSH\\\\A\\\\IoT\\\\Web\\\\trainingapp\\\\web\\\\trainingapp\\\\src\\\\components\\\\Views\\\\Analystics\\\\Charts\\\\ChartBarSimple.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getColor } from '@coreui/utils/src';\nimport { CCharts } from '@coreui/react-chartjs';\n\nconst ChartBarSimple = props => {\n  const {\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props;\n\n  const defaultDatasets = (() => {\n    return [{\n      data: dataPoints,\n      backgroundColor: getColor(backgroundColor),\n      pointHoverBackgroundColor: getColor(pointHoverBackgroundColor),\n      label: label,\n      barPercentage: 0.5,\n      categoryPercentage: 1\n    }];\n  })();\n\n  const defaultOptions = (() => {\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      }\n    };\n  })(); // render\n\n\n  return /*#__PURE__*/React.createElement(CCharts, Object.assign({}, attributes, {\n    type: \"bar\",\n    datasets: defaultDatasets,\n    options: defaultOptions,\n    labels: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }));\n};\n\nChartBarSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\nChartBarSimple.defaultProps = {\n  backgroundColor: 'rgba(0,0,0,.2)',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\nexport default ChartBarSimple;","map":{"version":3,"sources":["D:/CSH/A/IoT/Web/trainingapp/web/trainingapp/src/components/Views/Analystics/Charts/ChartBarSimple.js"],"names":["React","PropTypes","getColor","CCharts","ChartBarSimple","props","backgroundColor","pointHoverBackgroundColor","dataPoints","label","pointed","attributes","defaultDatasets","data","barPercentage","categoryPercentage","defaultOptions","maintainAspectRatio","legend","display","scales","xAxes","yAxes","propTypes","tag","oneOfType","func","string","className","array","bool","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,OAAT,QAAwB,uBAAxB;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAS;AAE9B,QAAM;AACJC,IAAAA,eADI;AAEJC,IAAAA,yBAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,KAJI;AAKJC,IAAAA,OALI;AAMJ,OAAGC;AANC,MAOFN,KAPJ;;AASA,QAAMO,eAAe,GAAG,CAAC,MAAI;AAC3B,WAAO,CACL;AACEC,MAAAA,IAAI,EAAEL,UADR;AAEEF,MAAAA,eAAe,EAAEJ,QAAQ,CAACI,eAAD,CAF3B;AAGEC,MAAAA,yBAAyB,EAAEL,QAAQ,CAACK,yBAAD,CAHrC;AAIEE,MAAAA,KAAK,EAAEA,KAJT;AAKEK,MAAAA,aAAa,EAAE,GALjB;AAMEC,MAAAA,kBAAkB,EAAE;AANtB,KADK,CAAP;AAUD,GAXuB,GAAxB;;AAYA,QAAMC,cAAc,GAAG,CAAC,MAAI;AAC1B,WAAO;AACLC,MAAAA,mBAAmB,EAAE,KADhB;AAELC,MAAAA,MAAM,EAAE;AACNC,QAAAA,OAAO,EAAE;AADH,OAFH;AAKLC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,CAAC;AACNF,UAAAA,OAAO,EAAE;AADH,SAAD,CADD;AAING,QAAAA,KAAK,EAAE,CAAC;AACNH,UAAAA,OAAO,EAAE;AADH,SAAD;AAJD;AALH,KAAP;AAcD,GAfsB,GAAvB,CAvB8B,CAwC9B;;;AAEA,sBACE,oBAAC,OAAD,oBACMR,UADN;AAEE,IAAA,IAAI,EAAC,KAFP;AAGE,IAAA,QAAQ,EAAEC,eAHZ;AAIE,IAAA,OAAO,EAAEI,cAJX;AAKE,IAAA,MAAM,EAAEP,KALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAUD,CApDD;;AAsDAL,cAAc,CAACmB,SAAf,GAA2B;AACzBC,EAAAA,GAAG,EAAEvB,SAAS,CAACwB,SAAV,CAAoB,CAACxB,SAAS,CAACyB,IAAX,EAAiBzB,SAAS,CAAC0B,MAA3B,CAApB,CADoB;AAEzBC,EAAAA,SAAS,EAAE3B,SAAS,CAAC0B,MAFI;AAGzB;AACArB,EAAAA,eAAe,EAAEL,SAAS,CAAC0B,MAJF;AAKzBpB,EAAAA,yBAAyB,EAAEN,SAAS,CAAC0B,MALZ;AAMzBnB,EAAAA,UAAU,EAAEP,SAAS,CAAC4B,KANG;AAOzBpB,EAAAA,KAAK,EAAER,SAAS,CAAC0B,MAPQ;AAQzBjB,EAAAA,OAAO,EAAET,SAAS,CAAC6B;AARM,CAA3B;AAWA1B,cAAc,CAAC2B,YAAf,GAA8B;AAC5BzB,EAAAA,eAAe,EAAE,gBADW;AAE5BE,EAAAA,UAAU,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAFgB;AAG5BC,EAAAA,KAAK,EAAE;AAHqB,CAA9B;AAMA,eAAeL,cAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getColor } from '@coreui/utils/src'\nimport { CCharts } from '@coreui/react-chartjs';\n\nconst ChartBarSimple = (props)=>{\n\n  const {\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props;\n\n  const defaultDatasets = (()=>{\n    return [\n      {\n        data: dataPoints,\n        backgroundColor: getColor(backgroundColor),\n        pointHoverBackgroundColor: getColor(pointHoverBackgroundColor),\n        label: label,\n        barPercentage: 0.5,\n        categoryPercentage: 1\n      }\n    ]\n  })();\n  const defaultOptions = (()=>{\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      }\n    }\n  })();\n\n  // render\n\n  return (\n    <CCharts\n      {...attributes}\n      type=\"bar\"\n      datasets={defaultDatasets}\n      options={defaultOptions}\n      labels={label}\n    />\n  )\n\n}\n\nChartBarSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\n\nChartBarSimple.defaultProps = {\n  backgroundColor: 'rgba(0,0,0,.2)',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\n\nexport default ChartBarSimple;\n"]},"metadata":{},"sourceType":"module"}