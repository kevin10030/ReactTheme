{"ast":null,"code":"var _jsxFileName = \"D:\\\\CSH\\\\A\\\\IoT\\\\Web\\\\trainingapp\\\\web\\\\trainingapp\\\\src\\\\components\\\\Views\\\\Devicemanagement\\\\DeviceCommandHistory.jsx\";\nimport React, { Component } from 'react';\nimport { CCard, CCardBody, CCardHeader, CCol, CRow, CBadge, CDataTable, CLink } from '@coreui/react';\nimport devicesData from './DevicesData.js';\nimport historyData from './HistoryData.js';\nexport default function DeviceCommandHistory({\n  match\n}) {\n  const {\n    useState\n  } = React;\n  const [currentPage, setCurrentPage] = useState(1);\n  const [currentPagination, setCurrentPagination] = useState(5);\n\n  const getLastVal = currentPage => {\n    if (currentPage * currentPagination < historyData.length) return currentPage * currentPagination;\n    return historyData.length;\n  };\n\n  const fields = [{\n    key: 'CommandType',\n    _style: {\n      width: '30%'\n    }\n  }, {\n    key: 'Time',\n    _style: {\n      width: '30%'\n    }\n  }, {\n    key: 'Result',\n    _style: {\n      width: '30%'\n    }\n  }];\n\n  const getColor = item => {\n    switch (item.CommandType) {\n      case 'Capture Photo':\n        return '#009f00';\n\n      case 'Capture Video':\n        return '#00009f';\n\n      default:\n        return '#000000';\n    }\n  };\n\n  const device = devicesData.find(device => device.id.toString() === match.params.id);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"animated fadeIn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CCol, {\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CCard, {\n    custom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CCardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, \"Device:  \", device.IMEI), /*#__PURE__*/React.createElement(CCardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CDataTable, {\n    items: historyData,\n    fields: fields // columnFilter\n    ,\n    tableFilter: true // footer\n    ,\n    itemsPerPageSelect: true,\n    itemsPerPage: currentPagination,\n    dark: false,\n    hover: false,\n    border: true,\n    outlined: true,\n    loading: false,\n    sorter: true // clickableRows\n    ,\n    pagination: {\n      doubleArrows: true,\n      align: 'center'\n    } // loading\n    // onRowClick={(item,index,col,e) => console.log(item,index,col,e)}\n    ,\n    onPageChange: val => {\n      console.log('new page:', val);\n      setCurrentPage(val);\n    },\n    onPagesChange: val => console.log('new pages:', val),\n    onPaginationChange: val => {\n      console.log('new pagination:', val);\n      setCurrentPagination(val);\n    } // onFilteredItemsChange={(val) => console.log('new filtered items:', val)}\n    // onSorterValueChange={(val) => console.log('new sorter value:', val)}\n    // onTableFilterChange={(val) => console.log('new table filter:', val)}\n    // onColumnFilterChange={(val) => console.log('new column filter:', val)}\n    ,\n    scopedSlots: {\n      'Result': item => /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }\n      }, item.Result == 'Failure' ? /*#__PURE__*/React.createElement(CBadge, {\n        color: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 51\n        }\n      }, item.Result) : /*#__PURE__*/React.createElement(CLink, {\n        style: {\n          color: getColor(item)\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 27\n        }\n      }, item.Result)),\n      'CommandType': item => /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"spin\", {\n        style: {\n          color: getColor(item)\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 23\n        }\n      }, item.CommandType)),\n      'Time': item => /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"spin\", {\n        style: {\n          color: getColor(item)\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 23\n        }\n      }, item.Time))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, (currentPage - 1) * currentPagination + 1 + '-' + getLastVal(currentPage) + ' of ' + historyData.length))))));\n}","map":{"version":3,"sources":["D:/CSH/A/IoT/Web/trainingapp/web/trainingapp/src/components/Views/Devicemanagement/DeviceCommandHistory.jsx"],"names":["React","Component","CCard","CCardBody","CCardHeader","CCol","CRow","CBadge","CDataTable","CLink","devicesData","historyData","DeviceCommandHistory","match","useState","currentPage","setCurrentPage","currentPagination","setCurrentPagination","getLastVal","length","fields","key","_style","width","getColor","item","CommandType","device","find","id","toString","params","IMEI","doubleArrows","align","val","console","log","Result","color","Time","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow, CBadge, CDataTable, CLink\r\n} from '@coreui/react';\r\n\r\nimport devicesData from './DevicesData.js'\r\nimport historyData from './HistoryData.js'\r\n\r\nexport default function DeviceCommandHistory({match}) {\r\n  const { useState } = React;\r\n\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [currentPagination, setCurrentPagination] = useState(5)\r\n  const getLastVal=(currentPage)=>{\r\n    if(currentPage*currentPagination < historyData.length)\r\n      return currentPage*currentPagination;\r\n    return historyData.length;\r\n  }\r\n\r\n  const fields = [    \r\n    { key: 'CommandType', _style: { width: '30%'} },        \r\n    { key: 'Time', _style: { width: '30%'} },    \r\n    { key: 'Result',_style: { width: '30%' } },\r\n  ]\r\n\r\n  const getColor = (item)=>{\r\n    switch (item.CommandType) {\r\n      case 'Capture Photo': return '#009f00'\r\n      case 'Capture Video': return '#00009f'\r\n      default: return '#000000'\r\n    }\r\n  }\r\n\r\n  const device = devicesData.find( device => device.id.toString() === match.params.id)\r\n\r\n  return (\r\n    <div className=\"animated fadeIn\">\r\n      <CRow> \r\n        <CCol xl=\"12\">\r\n          <CCard custom>\r\n            <CCardHeader>\r\n              Device:  {device.IMEI}\r\n            </CCardHeader>\r\n            <CCardBody>         \r\n            <CDataTable\r\n              items={historyData}\r\n              fields={fields}\r\n              // columnFilter\r\n              tableFilter\r\n              // footer\r\n              itemsPerPageSelect\r\n              itemsPerPage={currentPagination}\r\n              dark={false}\r\n              hover={false}\r\n              border={true}\r\n              outlined={true}\r\n              loading={false}\r\n              sorter\r\n              // clickableRows\r\n              pagination={{ doubleArrows: true, align: 'center' }}\r\n              // loading\r\n              // onRowClick={(item,index,col,e) => console.log(item,index,col,e)}\r\n              onPageChange={(val) => {\r\n                  console.log('new page:', val);\r\n                  setCurrentPage(val)\r\n                }\r\n              }\r\n              onPagesChange={(val) => \r\n                console.log('new pages:', val)\r\n              }\r\n              onPaginationChange={(val) => {\r\n                console.log('new pagination:', val);\r\n                setCurrentPagination(val);\r\n              }}\r\n              // onFilteredItemsChange={(val) => console.log('new filtered items:', val)}\r\n              // onSorterValueChange={(val) => console.log('new sorter value:', val)}\r\n              // onTableFilterChange={(val) => console.log('new table filter:', val)}\r\n              // onColumnFilterChange={(val) => console.log('new column filter:', val)}\r\n              scopedSlots = {{\r\n                'Result':\r\n                  (item)=>(\r\n                    <td>\r\n                      {/* {getResultTheme(item)} */}\r\n                      {\r\n                        item.Result == 'Failure'? <CBadge color='danger'>{item.Result}</CBadge> \r\n                        : <CLink style={{color:getColor(item)}} >{item.Result}</CLink>\r\n                      }\r\n                    </td>\r\n                  ),\r\n                'CommandType':\r\n                  (item)=>(\r\n                    <td>\r\n                      <spin style={{color:getColor(item)}}>\r\n                        {item.CommandType}\r\n                      </spin>\r\n                    </td>\r\n                  ),\r\n                  'Time':\r\n                  (item)=>(\r\n                    <td>\r\n                      <spin style={{color:getColor(item)}}>\r\n                        {item.Time}\r\n                      </spin>\r\n                    </td>\r\n                  )\r\n              }}\r\n            />\r\n            <div style={{textAlign:'right'}}>{              \r\n              ((currentPage-1)*currentPagination+1) + '-' + getLastVal(currentPage) +' of '+historyData.length\r\n              } \r\n            </div>\r\n          </CCardBody>\r\n          </CCard>\r\n        </CCol>      \r\n      </CRow>\r\n    </div>      \r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}