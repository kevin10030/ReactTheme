{"ast":null,"code":"var _jsxFileName = \"D:\\\\CSH\\\\A\\\\IoT\\\\Web\\\\trainingapp\\\\web\\\\trainingapp\\\\src\\\\components\\\\Views\\\\WebSite\\\\CheckoutForm.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport \"./CheckoutForm.css\";\nexport default function CheckoutForm() {\n  const [amount, setAmount] = useState(0);\n  const [currency, setCurrency] = useState(\"\");\n  const [clientSecret, setClientSecret] = useState(null);\n  const [error, setError] = useState(null);\n  const [metadata, setMetadata] = useState(null);\n  const [succeeded, setSucceeded] = useState(false);\n  const [processing, setProcessing] = useState(false);\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    // Step 1: Fetch product details such as amount and currency from\n    // API to make sure it can't be tampered with in the client.\n    // api.getProductDetails().then((productDetails) => {\n    //   setAmount(productDetails.amount / 100);\n    //   setCurrency(productDetails.currency);\n    // });\n    setAmount(239);\n    setCurrency(\"USD\"); // Step 2: Create PaymentIntent over Stripe API\n\n    api.createPaymentIntent().then(clientSecret => {\n      setClientSecret(clientSecret);\n    }).catch(err => {\n      setError(err.message);\n    });\n  }, []);\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true); // Step 3: Use clientSecret from PaymentIntent and the CardElement\n    // to confirm payment with stripe.confirmCardPayment()\n\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: ev.target.name.value\n        }\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed: ${payload.error.message}`);\n      setProcessing(false);\n      console.log(\"[error]\", payload.error);\n    } else {\n      setError(null);\n      setSucceeded(true);\n      setProcessing(false);\n      setMetadata(payload.paymentIntent);\n      console.log(\"[PaymentIntent]\", payload.paymentIntent);\n    }\n  };\n\n  const renderSuccess = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sr-field-success message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, \"Your test payment succeeded\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, \"View PaymentIntent response:\"), /*#__PURE__*/React.createElement(\"pre\", {\n      className: \"sr-callout\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, JSON.stringify(metadata, null, 2))));\n  };\n\n  const renderForm = () => {\n    const options = {\n      style: {\n        base: {\n          color: \"#32325d\",\n          fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n          fontSmoothing: \"antialiased\",\n          fontSize: \"16px\",\n          \"::placeholder\": {\n            color: \"#aab7c4\"\n          }\n        },\n        invalid: {\n          color: \"#fa755a\",\n          iconColor: \"#fa755a\"\n        }\n      }\n    };\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, currency.toLocaleUpperCase(), \" \", amount.toLocaleString(navigator.language, {\n      minimumFractionDigits: 2\n    }), \" \"), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, \"Pre-order the Pasha package\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sr-combo-inputs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sr-combo-inputs-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"name\",\n      name: \"name\",\n      placeholder: \"Name\",\n      autoComplete: \"cardholder\",\n      className: \"sr-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sr-combo-inputs-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(CardElement, {\n      className: \"sr-input sr-card-element\",\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }))), error && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message sr-field-error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 19\n      }\n    }, error), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn\",\n      disabled: processing || !clientSecret || !stripe,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, processing ? \"Processingâ€¦\" : \"Pay\"));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"checkout-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sr-payment-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sr-form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }), succeeded ? renderSuccess() : renderForm()));\n}","map":{"version":3,"sources":["D:/CSH/A/IoT/Web/trainingapp/web/trainingapp/src/components/Views/WebSite/CheckoutForm.js"],"names":["React","useEffect","useState","CardElement","useStripe","useElements","CheckoutForm","amount","setAmount","currency","setCurrency","clientSecret","setClientSecret","error","setError","metadata","setMetadata","succeeded","setSucceeded","processing","setProcessing","stripe","elements","api","createPaymentIntent","then","catch","err","message","handleSubmit","ev","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","billing_details","name","target","value","console","log","paymentIntent","renderSuccess","JSON","stringify","renderForm","options","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","toLocaleUpperCase","toLocaleString","navigator","language","minimumFractionDigits"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport \"./CheckoutForm.css\";\r\n\r\nexport default function CheckoutForm() {\r\n  const [amount, setAmount] = useState(0);\r\n  const [currency, setCurrency] = useState(\"\");\r\n  const [clientSecret, setClientSecret] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [metadata, setMetadata] = useState(null);\r\n  const [succeeded, setSucceeded] = useState(false);\r\n  const [processing, setProcessing] = useState(false);\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  useEffect(() => {\r\n    // Step 1: Fetch product details such as amount and currency from\r\n    // API to make sure it can't be tampered with in the client.\r\n      // api.getProductDetails().then((productDetails) => {\r\n      //   setAmount(productDetails.amount / 100);\r\n      //   setCurrency(productDetails.currency);\r\n      // });\r\n\r\n      setAmount(239);\r\n      setCurrency(\"USD\");\r\n\r\n    // Step 2: Create PaymentIntent over Stripe API\r\n    api\r\n      .createPaymentIntent()\r\n      .then((clientSecret) => {\r\n        setClientSecret(clientSecret);\r\n      })\r\n      .catch((err) => {\r\n        setError(err.message);\r\n      });\r\n  }, []);\r\n\r\n  const handleSubmit = async (ev) => {\r\n    ev.preventDefault();\r\n    setProcessing(true);\r\n\r\n    // Step 3: Use clientSecret from PaymentIntent and the CardElement\r\n    // to confirm payment with stripe.confirmCardPayment()\r\n    const payload = await stripe.confirmCardPayment(clientSecret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n        billing_details: {\r\n          name: ev.target.name.value,\r\n        },\r\n      },\r\n    });\r\n\r\n    if (payload.error) {\r\n      setError(`Payment failed: ${payload.error.message}`);\r\n      setProcessing(false);\r\n      console.log(\"[error]\", payload.error);\r\n    } else {\r\n      setError(null);\r\n      setSucceeded(true);\r\n      setProcessing(false);\r\n      setMetadata(payload.paymentIntent);\r\n      console.log(\"[PaymentIntent]\", payload.paymentIntent);\r\n    }\r\n  };\r\n\r\n  const renderSuccess = () => {\r\n    return (\r\n      <div className=\"sr-field-success message\">\r\n        <h1>Your test payment succeeded</h1>\r\n        <p>View PaymentIntent response:</p>\r\n        <pre className=\"sr-callout\">\r\n          <code>{JSON.stringify(metadata, null, 2)}</code>\r\n        </pre>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderForm = () => {\r\n    const options = {\r\n      style: {\r\n        base: {\r\n          color: \"#32325d\",\r\n          fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\r\n          fontSmoothing: \"antialiased\",\r\n          fontSize: \"16px\",\r\n          \"::placeholder\": {\r\n            color: \"#aab7c4\",\r\n          },\r\n        },\r\n        invalid: {\r\n          color: \"#fa755a\",\r\n          iconColor: \"#fa755a\",\r\n        },\r\n      },\r\n    };\r\n\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <h1>\r\n          {currency.toLocaleUpperCase()}{\" \"}\r\n          {amount.toLocaleString(navigator.language, {\r\n            minimumFractionDigits: 2,\r\n          })}{\" \"}\r\n        </h1>\r\n        <h4>Pre-order the Pasha package</h4>\r\n\r\n        <div className=\"sr-combo-inputs\">\r\n          <div className=\"sr-combo-inputs-row\">\r\n            <input\r\n              type=\"text\"\r\n              id=\"name\"\r\n              name=\"name\"\r\n              placeholder=\"Name\"\r\n              autoComplete=\"cardholder\"\r\n              className=\"sr-input\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"sr-combo-inputs-row\">\r\n            <CardElement\r\n              className=\"sr-input sr-card-element\"\r\n              options={options}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {error && <div className=\"message sr-field-error\">{error}</div>}\r\n\r\n        <button\r\n          className=\"btn\"\r\n          disabled={processing || !clientSecret || !stripe}\r\n        >\r\n          {processing ? \"Processingâ€¦\" : \"Pay\"}\r\n        </button>\r\n      </form>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"checkout-form\">\r\n      <div className=\"sr-payment-form\">\r\n        <div className=\"sr-form-row\" />\r\n        {succeeded ? renderSuccess() : renderForm()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}