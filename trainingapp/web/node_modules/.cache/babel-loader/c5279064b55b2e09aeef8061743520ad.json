{"ast":null,"code":"var _jsxFileName = \"D:\\\\CSH\\\\A\\\\IoT\\\\Web\\\\trainingapp\\\\web\\\\trainingapp\\\\src\\\\components\\\\Views\\\\WebSite\\\\util.js\";\n\n/* eslint-disable no-console */\nimport React, { useState, useEffect } from 'react';\nexport const logEvent = name => event => {\n  console.log(`[${name}]`, event);\n};\nexport const Result = ({\n  children\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"result\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 39\n  }\n}, children);\nexport const ErrorResult = ({\n  children\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"error\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 3\n  }\n}, children); // Demo hook to dynamically change font size based on window size.\n\nexport const useDynamicFontSize = () => {\n  const [fontSize, setFontSize] = useState(window.innerWidth < 450 ? '14px' : '18px');\n  useEffect(() => {\n    const onResize = () => {\n      setFontSize(window.innerWidth < 450 ? '14px' : '18px');\n    };\n\n    window.addEventListener('resize', onResize);\n    return () => {\n      window.removeEventListener('resize', onResize);\n    };\n  }, []);\n  return fontSize;\n};","map":{"version":3,"sources":["D:/CSH/A/IoT/Web/trainingapp/web/trainingapp/src/components/Views/WebSite/util.js"],"names":["React","useState","useEffect","logEvent","name","event","console","log","Result","children","ErrorResult","useDynamicFontSize","fontSize","setFontSize","window","innerWidth","onResize","addEventListener","removeEventListener"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,OAAO,MAAMC,QAAQ,GAAIC,IAAD,IAAWC,KAAD,IAAW;AAC3CC,EAAAA,OAAO,CAACC,GAAR,CAAa,IAAGH,IAAK,GAArB,EAAyBC,KAAzB;AACD,CAFM;AAIP,OAAO,MAAMG,MAAM,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,kBAAgB;AAAK,EAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAyBA,QAAzB,CAA/B;AAEP,OAAO,MAAMC,WAAW,GAAG,CAAC;AAACD,EAAAA;AAAD,CAAD,kBACzB;AAAK,EAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAwBA,QAAxB,CADK,C,CAIP;;AACA,OAAO,MAAME,kBAAkB,GAAG,MAAM;AACtC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CACtCa,MAAM,CAACC,UAAP,GAAoB,GAApB,GAA0B,MAA1B,GAAmC,MADG,CAAxC;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,QAAQ,GAAG,MAAM;AACrBH,MAAAA,WAAW,CAACC,MAAM,CAACC,UAAP,GAAoB,GAApB,GAA0B,MAA1B,GAAmC,MAApC,CAAX;AACD,KAFD;;AAIAD,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCD,QAAlC;AAEA,WAAO,MAAM;AACXF,MAAAA,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCF,QAArC;AACD,KAFD;AAGD,GAVQ,EAUN,EAVM,CAAT;AAYA,SAAOJ,QAAP;AACD,CAlBM","sourcesContent":["/* eslint-disable no-console */\r\nimport React, {useState, useEffect} from 'react';\r\n\r\nexport const logEvent = (name) => (event) => {\r\n  console.log(`[${name}]`, event);\r\n};\r\n\r\nexport const Result = ({children}) => <div className=\"result\">{children}</div>;\r\n\r\nexport const ErrorResult = ({children}) => (\r\n  <div className=\"error\">{children}</div>\r\n);\r\n\r\n// Demo hook to dynamically change font size based on window size.\r\nexport const useDynamicFontSize = () => {\r\n  const [fontSize, setFontSize] = useState(\r\n    window.innerWidth < 450 ? '14px' : '18px'\r\n  );\r\n\r\n  useEffect(() => {\r\n    const onResize = () => {\r\n      setFontSize(window.innerWidth < 450 ? '14px' : '18px');\r\n    };\r\n\r\n    window.addEventListener('resize', onResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', onResize);\r\n    };\r\n  }, []);\r\n\r\n  return fontSize;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}