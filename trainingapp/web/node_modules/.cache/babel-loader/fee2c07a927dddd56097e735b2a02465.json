{"ast":null,"code":"var _jsxFileName = \"D:\\\\CSH\\\\Samples\\\\Theme\\\\ReactTheme\\\\trainingapp\\\\web\\\\src\\\\layout\\\\custominput\\\\CustomInput.js\";\nimport React from \"react\"; // nodejs library to set properties for components\n\nimport PropTypes from \"prop-types\"; // nodejs library that concatenates classes\n\nimport classNames from \"classnames\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Input from \"@material-ui/core/Input\";\nimport styles from \"../../assets/material/jss/material-dashboard-pro-react/components/customInputStyle.js\";\nconst useStyles = makeStyles(styles);\nexport default function CustomInput(props) {\n  const classes = useStyles();\n  const {\n    formControlProps,\n    labelText,\n    id,\n    labelProps,\n    inputProps,\n    error,\n    white,\n    inputRootCustomClasses,\n    success,\n    helperText,\n    value\n  } = props;\n  const labelClasses = classNames({\n    [\" \" + classes.labelRootError]: error,\n    [\" \" + classes.labelRootSuccess]: success && !error\n  });\n  const underlineClasses = classNames({\n    [classes.underlineError]: error,\n    [classes.underlineSuccess]: success && !error,\n    [classes.underline]: true,\n    [classes.whiteUnderline]: white\n  });\n  const marginTop = classNames({\n    [inputRootCustomClasses]: inputRootCustomClasses !== undefined\n  });\n  const inputClasses = classNames({\n    [classes.input]: true,\n    [classes.whiteInput]: white\n  });\n  var formControlClasses;\n\n  if (formControlProps !== undefined) {\n    formControlClasses = classNames(formControlProps.className, classes.formControl);\n  } else {\n    formControlClasses = classes.formControl;\n  }\n\n  var helpTextClasses = classNames({\n    [classes.labelRootError]: error,\n    [classes.labelRootSuccess]: success && !error\n  });\n  return /*#__PURE__*/React.createElement(FormControl, Object.assign({}, formControlProps, {\n    className: formControlClasses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }), labelText !== undefined ? /*#__PURE__*/React.createElement(InputLabel, Object.assign({\n    className: classes.labelRoot + \" \" + labelClasses,\n    htmlFor: id\n  }, labelProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }), labelText) : null, /*#__PURE__*/React.createElement(Input, Object.assign({\n    classes: {\n      input: inputClasses,\n      root: marginTop,\n      disabled: classes.disabled,\n      underline: underlineClasses\n    },\n    id: id,\n    value: value\n  }, inputProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  })), helperText !== undefined ? /*#__PURE__*/React.createElement(FormHelperText, {\n    id: id + \"-text\",\n    className: helpTextClasses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, helperText) : null);\n}\nCustomInput.propTypes = {\n  labelText: PropTypes.node,\n  labelProps: PropTypes.object,\n  id: PropTypes.string,\n  inputProps: PropTypes.object,\n  formControlProps: PropTypes.object,\n  inputRootCustomClasses: PropTypes.string,\n  error: PropTypes.bool,\n  success: PropTypes.bool,\n  white: PropTypes.bool,\n  helperText: PropTypes.node,\n  value: PropTypes.string\n};","map":{"version":3,"sources":["D:/CSH/Samples/Theme/ReactTheme/trainingapp/web/src/layout/custominput/CustomInput.js"],"names":["React","PropTypes","classNames","makeStyles","FormControl","InputLabel","FormHelperText","Input","styles","useStyles","CustomInput","props","classes","formControlProps","labelText","id","labelProps","inputProps","error","white","inputRootCustomClasses","success","helperText","value","labelClasses","labelRootError","labelRootSuccess","underlineClasses","underlineError","underlineSuccess","underline","whiteUnderline","marginTop","undefined","inputClasses","input","whiteInput","formControlClasses","className","formControl","helpTextClasses","labelRoot","root","disabled","propTypes","node","object","string","bool"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n// nodejs library to set properties for components\r\nimport PropTypes from \"prop-types\";\r\n// nodejs library that concatenates classes\r\nimport classNames from \"classnames\";\r\n// @material-ui/core components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Input from \"@material-ui/core/Input\";\r\n\r\nimport styles from \"../../assets/material/jss/material-dashboard-pro-react/components/customInputStyle.js\";\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function CustomInput(props) {\r\n  const classes = useStyles();\r\n  const {\r\n    formControlProps,\r\n    labelText,\r\n    id,\r\n    labelProps,\r\n    inputProps,\r\n    error,\r\n    white,\r\n    inputRootCustomClasses,\r\n    success,\r\n    helperText,\r\n    value\r\n  } = props;\r\n\r\n  const labelClasses = classNames({\r\n    [\" \" + classes.labelRootError]: error,\r\n    [\" \" + classes.labelRootSuccess]: success && !error\r\n  });\r\n  const underlineClasses = classNames({\r\n    [classes.underlineError]: error,\r\n    [classes.underlineSuccess]: success && !error,\r\n    [classes.underline]: true,\r\n    [classes.whiteUnderline]: white\r\n  });\r\n  const marginTop = classNames({\r\n    [inputRootCustomClasses]: inputRootCustomClasses !== undefined\r\n  });\r\n  const inputClasses = classNames({\r\n    [classes.input]: true,\r\n    [classes.whiteInput]: white\r\n  });\r\n  var formControlClasses;\r\n  if (formControlProps !== undefined) {\r\n    formControlClasses = classNames(\r\n      formControlProps.className,\r\n      classes.formControl\r\n    );\r\n  } else {\r\n    formControlClasses = classes.formControl;\r\n  }\r\n  var helpTextClasses = classNames({\r\n    [classes.labelRootError]: error,\r\n    [classes.labelRootSuccess]: success && !error\r\n  });\r\n  return (\r\n    <FormControl {...formControlProps} className={formControlClasses}>\r\n      {labelText !== undefined ? (\r\n        <InputLabel\r\n          className={classes.labelRoot + \" \" + labelClasses}\r\n          htmlFor={id}\r\n          {...labelProps}\r\n        >\r\n          {labelText}\r\n        </InputLabel>\r\n      ) : null}\r\n      <Input\r\n        classes={{\r\n          input: inputClasses,\r\n          root: marginTop,\r\n          disabled: classes.disabled,\r\n          underline: underlineClasses\r\n        }}\r\n        id={id}\r\n        value={value}\r\n        {...inputProps}\r\n      />\r\n      {helperText !== undefined ? (\r\n        <FormHelperText id={id + \"-text\"} className={helpTextClasses}>\r\n          {helperText}\r\n        </FormHelperText>\r\n      ) : null}\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nCustomInput.propTypes = {\r\n  labelText: PropTypes.node,\r\n  labelProps: PropTypes.object,\r\n  id: PropTypes.string,\r\n  inputProps: PropTypes.object,\r\n  formControlProps: PropTypes.object,\r\n  inputRootCustomClasses: PropTypes.string,\r\n  error: PropTypes.bool,\r\n  success: PropTypes.bool,\r\n  white: PropTypes.bool,\r\n  helperText: PropTypes.node,\r\n  value: PropTypes.string\r\n};\r\n"]},"metadata":{},"sourceType":"module"}