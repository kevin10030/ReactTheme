{"ast":null,"code":"var _jsxFileName = \"D:\\\\CSH\\\\A\\\\IoT\\\\Web\\\\trainingapp\\\\web\\\\trainingapp\\\\src\\\\components\\\\Views\\\\Analystics\\\\Charts\\\\MainChartExample.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CCharts } from '@coreui/react-chartjs';\nimport { getColor, hexToRgba } from '@coreui/utils/src';\n\nconst MainChartExample = props => {\n  const {\n    borderColor,\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props;\n\n  const random = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  const defaultDatasets = (() => {\n    const brandSuccess = getColor('success') || '#4dbd74';\n    const brandInfo = getColor('info') || '#20a8d8';\n    const brandDanger = getColor('danger') || '#f86c6b';\n    let elements = 27;\n    const data1 = [];\n    const data2 = [];\n    const data3 = [];\n\n    for (let i = 0; i <= elements; i++) {\n      data1.push(random(50, 200));\n      data2.push(random(80, 100));\n      data3.push(65);\n    }\n\n    return [{\n      label: 'My First dataset',\n      backgroundColor: hexToRgba(brandInfo, 10),\n      borderColor: brandInfo,\n      pointHoverBackgroundColor: brandInfo,\n      borderWidth: 2,\n      data: data1\n    }, {\n      label: 'My Second dataset',\n      backgroundColor: 'transparent',\n      borderColor: brandSuccess,\n      pointHoverBackgroundColor: brandSuccess,\n      borderWidth: 2,\n      data: data2\n    }, {\n      label: 'My Third dataset',\n      backgroundColor: 'transparent',\n      borderColor: brandDanger,\n      pointHoverBackgroundColor: brandDanger,\n      borderWidth: 1,\n      borderDash: [8, 5],\n      data: data3\n    }];\n  })();\n\n  const defaultOptions = (() => {\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          gridLines: {\n            drawOnChartArea: false\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            beginAtZero: true,\n            maxTicksLimit: 5,\n            stepSize: Math.ceil(250 / 5),\n            max: 250\n          },\n          gridLines: {\n            display: true\n          }\n        }]\n      },\n      elements: {\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4,\n          hoverBorderWidth: 3\n        }\n      }\n    };\n  })(); // render\n\n\n  return /*#__PURE__*/React.createElement(CCharts, Object.assign({}, attributes, {\n    type: \"line\",\n    datasets: defaultDatasets,\n    options: defaultOptions,\n    labels: ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }));\n};\n\nMainChartExample.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  borderColor: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\nMainChartExample.defaultProps = {\n  borderColor: 'rgba(255,255,255,.55)',\n  backgroundColor: 'transparent',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\nexport default MainChartExample;","map":{"version":3,"sources":["D:/CSH/A/IoT/Web/trainingapp/web/trainingapp/src/components/Views/Analystics/Charts/MainChartExample.js"],"names":["React","PropTypes","CCharts","getColor","hexToRgba","MainChartExample","props","borderColor","backgroundColor","pointHoverBackgroundColor","dataPoints","label","pointed","attributes","random","min","max","Math","floor","defaultDatasets","brandSuccess","brandInfo","brandDanger","elements","data1","data2","data3","i","push","borderWidth","data","borderDash","defaultOptions","maintainAspectRatio","legend","display","scales","xAxes","gridLines","drawOnChartArea","yAxes","ticks","beginAtZero","maxTicksLimit","stepSize","ceil","point","radius","hitRadius","hoverRadius","hoverBorderWidth","propTypes","tag","oneOfType","func","string","className","array","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CCharts } from '@coreui/react-chartjs';\nimport { getColor, hexToRgba } from '@coreui/utils/src'\n\nconst MainChartExample = (props)=>{\n\n  const {\n    borderColor,\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props;\n\n  const random = (min, max)=>{\n    return Math.floor(Math.random() * (max - min + 1) + min)\n  }\n\n  const defaultDatasets = (()=>{\n    const brandSuccess = getColor('success') || '#4dbd74'\n    const brandInfo = getColor('info') || '#20a8d8'\n    const brandDanger = getColor('danger') || '#f86c6b'\n    let elements = 27\n    const data1 = []\n    const data2 = []\n    const data3 = []\n    for (let i = 0; i <= elements; i++) {\n      data1.push(random(50, 200))\n      data2.push(random(80, 100))\n      data3.push(65)\n    }\n    return [\n      {\n        label: 'My First dataset',\n        backgroundColor: hexToRgba(brandInfo, 10),\n        borderColor: brandInfo,\n        pointHoverBackgroundColor: brandInfo,\n        borderWidth: 2,\n        data: data1\n      },\n      {\n        label: 'My Second dataset',\n        backgroundColor: 'transparent',\n        borderColor: brandSuccess,\n        pointHoverBackgroundColor: brandSuccess,\n        borderWidth: 2,\n        data: data2\n      },\n      {\n        label: 'My Third dataset',\n        backgroundColor: 'transparent',\n        borderColor: brandDanger,\n        pointHoverBackgroundColor: brandDanger,\n        borderWidth: 1,\n        borderDash: [8, 5],\n        data: data3\n      }\n    ]\n  })();\n  const defaultOptions = (()=>{\n    return {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [{\n            gridLines: {\n              drawOnChartArea: false\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              beginAtZero: true,\n              maxTicksLimit: 5,\n              stepSize: Math.ceil(250 / 5),\n              max: 250\n            },\n            gridLines: {\n              display: true\n            }\n          }]\n        },\n        elements: {\n          point: {\n            radius: 0,\n            hitRadius: 10,\n            hoverRadius: 4,\n            hoverBorderWidth: 3\n          }\n        }\n      }\n    }\n  )();\n\n  // render\n\n  return (\n    <CCharts\n      {...attributes}\n      type=\"line\"\n      datasets={defaultDatasets}\n      options={defaultOptions}\n      labels={['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su']}\n    />\n  )\n\n}\n\nMainChartExample.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  borderColor: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\n\nMainChartExample.defaultProps = {\n  borderColor: 'rgba(255,255,255,.55)',\n  backgroundColor: 'transparent',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\n\nexport default MainChartExample;\n"]},"metadata":{},"sourceType":"module"}