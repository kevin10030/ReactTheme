{"ast":null,"code":"var _jsxFileName = \"D:\\\\CSH\\\\A\\\\IoT\\\\Web\\\\trainingapp\\\\web\\\\trainingapp\\\\src\\\\components\\\\Views\\\\Analystics\\\\Charts\\\\ChartLineSimple.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getColor } from '@coreui/utils/src';\nimport { CCharts } from '@coreui/react-chartjs';\n\nconst ChartLineSimple = props => {\n  const {\n    borderColor,\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props;\n\n  const pointHoverColor = (() => {\n    if (pointHoverBackgroundColor) {\n      return pointHoverBackgroundColor;\n    } else if (backgroundColor !== 'transparent') {\n      return backgroundColor;\n    }\n\n    return borderColor;\n  })();\n\n  const defaultDatasets = (() => {\n    return [{\n      data: dataPoints,\n      borderColor: getColor(borderColor),\n      backgroundColor: getColor(backgroundColor),\n      pointBackgroundColor: getColor(pointHoverColor),\n      pointHoverBackgroundColor: getColor(pointHoverColor),\n      label: label\n    }];\n  })();\n\n  const pointedOptions = (() => {\n    return {\n      scales: {\n        xAxes: [{\n          offset: true,\n          gridLines: {\n            color: 'transparent',\n            zeroLineColor: 'transparent'\n          },\n          ticks: {\n            fontSize: 2,\n            fontColor: 'transparent'\n          }\n        }],\n        yAxes: [{\n          display: false,\n          ticks: {\n            display: false,\n            min: Math.min.apply(Math, dataPoints) - 5,\n            max: Math.max.apply(Math, dataPoints) + 5\n          }\n        }]\n      },\n      elements: {\n        line: {\n          borderWidth: 1\n        },\n        point: {\n          radius: 4,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    };\n  })();\n\n  const straightOptions = (() => {\n    return {\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      },\n      elements: {\n        line: {\n          borderWidth: 2\n        },\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    };\n  })();\n\n  const defaultOptions = (() => {\n    const options = pointed ? pointedOptions : straightOptions;\n    return Object.assign({}, options, {\n      maintainAspectRatio: false,\n      legend: {\n        display: false\n      }\n    });\n  })(); // render\n\n\n  return /*#__PURE__*/React.createElement(CCharts, Object.assign({}, attributes, {\n    type: \"line\",\n    datasets: defaultDatasets,\n    options: defaultOptions,\n    labels: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }));\n};\n\nChartLineSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  borderColor: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\nChartLineSimple.defaultProps = {\n  borderColor: 'rgba(255,255,255,.55)',\n  backgroundColor: 'transparent',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\nexport default ChartLineSimple;","map":{"version":3,"sources":["D:/CSH/A/IoT/Web/trainingapp/web/trainingapp/src/components/Views/Analystics/Charts/ChartLineSimple.js"],"names":["React","PropTypes","getColor","CCharts","ChartLineSimple","props","borderColor","backgroundColor","pointHoverBackgroundColor","dataPoints","label","pointed","attributes","pointHoverColor","defaultDatasets","data","pointBackgroundColor","pointedOptions","scales","xAxes","offset","gridLines","color","zeroLineColor","ticks","fontSize","fontColor","yAxes","display","min","Math","apply","max","elements","line","borderWidth","point","radius","hitRadius","hoverRadius","straightOptions","defaultOptions","options","Object","assign","maintainAspectRatio","legend","propTypes","tag","oneOfType","func","string","className","array","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getColor } from '@coreui/utils/src'\nimport { CCharts } from '@coreui/react-chartjs';\n\nconst ChartLineSimple = (props)=>{\n\n  const {\n    borderColor,\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props;\n\n  const pointHoverColor = (()=>{\n    if (pointHoverBackgroundColor) {\n      return pointHoverBackgroundColor\n    } else if (backgroundColor !== 'transparent') {\n      return backgroundColor\n    }\n    return borderColor\n  })();\n\n  const defaultDatasets = (()=>{\n    return [\n      {\n        data: dataPoints,\n        borderColor: getColor(borderColor),\n        backgroundColor: getColor(backgroundColor),\n        pointBackgroundColor: getColor(pointHoverColor),\n        pointHoverBackgroundColor: getColor(pointHoverColor),\n        label: label\n      }\n    ]\n  })();\n  const pointedOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [\n          {\n            offset: true,\n            gridLines: {\n              color: 'transparent',\n              zeroLineColor: 'transparent'\n            },\n            ticks: {\n              fontSize: 2,\n              fontColor: 'transparent'\n            }\n          }\n        ],\n        yAxes: [\n          {\n            display: false,\n            ticks: {\n              display: false,\n              min: Math.min.apply(Math, dataPoints) - 5,\n              max: Math.max.apply(Math, dataPoints) + 5\n            }\n          }\n        ]\n      },\n      elements: {\n        line: {\n          borderWidth: 1\n        },\n        point: {\n          radius: 4,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })();\n  const straightOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      },\n      elements: {\n        line: {\n          borderWidth: 2\n        },\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })();\n  const defaultOptions = (()=>{\n    const options = pointed ? pointedOptions : straightOptions\n      return Object.assign({}, options, {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        }\n      })\n  })();\n\n  // render\n\n  return (\n    <CCharts\n      {...attributes}\n      type=\"line\"\n      datasets={defaultDatasets}\n      options={defaultOptions}\n      labels={label}\n    />\n  )\n\n}\n\nChartLineSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  borderColor: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\n\nChartLineSimple.defaultProps = {\n  borderColor: 'rgba(255,255,255,.55)',\n  backgroundColor: 'transparent',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\n\nexport default ChartLineSimple;\n"]},"metadata":{},"sourceType":"module"}