{"ast":null,"code":"var _jsxFileName = \"D:\\\\CSH\\\\A\\\\IoT\\\\Web\\\\trainingapp\\\\web\\\\trainingapp\\\\src\\\\components\\\\Views\\\\WebSite\\\\CheckoutForm.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { CardNumberElement, CardCvcElement, CardExpiryElement, Elements, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport { logEvent, Result, ErrorResult } from './util';\nimport './styles/common.css';\n\nconst NotAvailableResult = () => /*#__PURE__*/React.createElement(Result, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"p\", {\n  style: {\n    textAlign: 'center'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }\n}, \"PaymentRequest is not available in your browser.\"), window.location.protocol !== 'https:' && /*#__PURE__*/React.createElement(\"p\", {\n  style: {\n    textAlign: 'center'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 7\n  }\n}, \"Try using\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n  href: \"https://ngrok.com\",\n  target: \"_blank\",\n  rel: \"noopener noreferrer\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }\n}, \"ngrok\"), ' ', \"to view this demo over https.\"));\n\nconst ELEMENT_OPTIONS = {\n  style: {\n    paymentRequestButton: {\n      type: 'buy',\n      theme: 'dark'\n    }\n  }\n};\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const [paymentRequest, setPaymentRequest] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [notAvailable, setNotAvailable] = useState(false);\n  const [paymentMethod, setPaymentMethod] = useState(null);\n  useEffect(() => {\n    if (!stripe) {\n      // We can't create a PaymentRequest until Stripe.js loads.\n      return;\n    }\n\n    const pr = stripe.paymentRequest({\n      country: 'US',\n      currency: 'usd',\n      total: {\n        label: 'Demo total',\n        amount: 100\n      }\n    });\n    pr.on('paymentmethod', async event => {\n      setPaymentMethod(event.paymentMethod);\n      event.complete('success');\n    });\n    pr.canMakePayment().then(canMakePaymentRes => {\n      if (canMakePaymentRes) {\n        setPaymentRequest(pr);\n      } else {\n        setNotAvailable(true);\n      }\n    });\n  }, [stripe]);\n  return /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, paymentRequest && /*#__PURE__*/React.createElement(PaymentRequestButtonElement, {\n    onClick: event => {\n      if (paymentMethod) {\n        event.preventDefault();\n        setErrorMessage('You can only use the PaymentRequest button once. Refresh the page to start over.');\n      }\n    },\n    options: { ...ELEMENT_OPTIONS,\n      paymentRequest\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), notAvailable && /*#__PURE__*/React.createElement(NotAvailableResult, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 24\n    }\n  }), errorMessage && /*#__PURE__*/React.createElement(ErrorResult, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 24\n    }\n  }, errorMessage), paymentMethod && /*#__PURE__*/React.createElement(Result, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }, \"Got PaymentMethod: \", paymentMethod.id));\n}","map":{"version":3,"sources":["D:/CSH/A/IoT/Web/trainingapp/web/trainingapp/src/components/Views/WebSite/CheckoutForm.js"],"names":["React","useEffect","useState","CardNumberElement","CardCvcElement","CardExpiryElement","Elements","useElements","useStripe","logEvent","Result","ErrorResult","NotAvailableResult","textAlign","window","location","protocol","ELEMENT_OPTIONS","style","paymentRequestButton","type","theme","CheckoutForm","stripe","paymentRequest","setPaymentRequest","errorMessage","setErrorMessage","notAvailable","setNotAvailable","paymentMethod","setPaymentMethod","pr","country","currency","total","label","amount","on","event","complete","canMakePayment","then","canMakePaymentRes","preventDefault","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { \r\n  CardNumberElement,\r\n  CardCvcElement,\r\n  CardExpiryElement,\r\n  Elements,\r\n  useElements,\r\n  useStripe \r\n} from \"@stripe/react-stripe-js\";\r\n\r\nimport {logEvent, Result, ErrorResult} from './util';\r\nimport './styles/common.css';\r\n\r\nconst NotAvailableResult = () => (\r\n  <Result>\r\n    <p style={{textAlign: 'center'}}>\r\n      PaymentRequest is not available in your browser.\r\n    </p>\r\n    {window.location.protocol !== 'https:' && (\r\n      <p style={{textAlign: 'center'}}>\r\n        Try using{' '}\r\n        <a href=\"https://ngrok.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          ngrok\r\n        </a>{' '}\r\n        to view this demo over https.\r\n      </p>\r\n    )}\r\n  </Result>\r\n);\r\n\r\nconst ELEMENT_OPTIONS = {\r\n  style: {\r\n    paymentRequestButton: {\r\n      type: 'buy',\r\n      theme: 'dark',\r\n    },\r\n  },\r\n};\r\n\r\nexport default function CheckoutForm() {\r\n  const stripe = useStripe();\r\n  const [paymentRequest, setPaymentRequest] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [notAvailable, setNotAvailable] = useState(false);\r\n  const [paymentMethod, setPaymentMethod] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!stripe) {\r\n      // We can't create a PaymentRequest until Stripe.js loads.\r\n      return;\r\n    }\r\n\r\n    const pr = stripe.paymentRequest({\r\n      country: 'US',\r\n      currency: 'usd',\r\n      total: {\r\n        label: 'Demo total',\r\n        amount: 100,\r\n      },\r\n    });\r\n\r\n    pr.on('paymentmethod', async (event) => {\r\n      setPaymentMethod(event.paymentMethod);\r\n      event.complete('success');\r\n    });\r\n\r\n    pr.canMakePayment().then((canMakePaymentRes) => {\r\n      if (canMakePaymentRes) {\r\n        setPaymentRequest(pr);\r\n      } else {\r\n        setNotAvailable(true);\r\n      }\r\n    });\r\n  }, [stripe]);\r\n\r\n  return (\r\n    <form>\r\n      {paymentRequest && (\r\n        <PaymentRequestButtonElement\r\n          onClick={(event) => {\r\n            if (paymentMethod) {\r\n              event.preventDefault();\r\n              setErrorMessage(\r\n                'You can only use the PaymentRequest button once. Refresh the page to start over.'\r\n              );\r\n            }\r\n          }}\r\n          options={{\r\n            ...ELEMENT_OPTIONS,\r\n            paymentRequest,\r\n          }}\r\n        />\r\n      )}\r\n      {notAvailable && <NotAvailableResult />}\r\n      {errorMessage && <ErrorResult>{errorMessage}</ErrorResult>}\r\n      {paymentMethod && <Result>Got PaymentMethod: {paymentMethod.id}</Result>}\r\n    </form>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}